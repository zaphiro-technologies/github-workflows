# Copyright 2024 Zaphiro Technologies
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Auto-approve & auto-merge Dependabot PRs

on:
  schedule:
    - cron: "0 3 * * *" # Every day at 3 AM UTC
  workflow_dispatch:
  workflow_call:

permissions:
  pull-requests: write
  contents: write

concurrency:
  group: ${{ github.ref_name }}-approve-and-merge
  cancel-in-progress: true

jobs:
  approve-and-merge:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/create-github-app-token@v2
        id: generate-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_SECRET }}
      - name: Approve & Merge Dependabot PRs
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          # Add label
          if ! gh label list --repo "$GITHUB_REPOSITORY" --limit 100 | grep -q auto-approved; then
            echo "Label auto-approved does not exist. Creating it..."
            gh label create auto-approved --repo "$GITHUB_REPOSITORY" --color "0e8a16" --description "Automatically approved and merged by workflow"
          else
            echo "Label auto-approved already exists. Skipping creation."
          fi

          echo "Fetching open Dependabot PRs older than 3 days and newer than 30 days ..."

          gh pr list --repo "$GITHUB_REPOSITORY" --author app/dependabot --state open --json number,createdAt,title,labels,headRefName --jq '.[] | select((.createdAt | fromdateiso8601) < (now - 259200))' | jq -c '.' | while IFS= read -r pr; do
            number=$(echo "$pr" | jq -r '.number')
            title=$(echo "$pr" | jq -r '.title')
            labels=$(echo "$pr" | jq -r '[.labels[].name] | join(",")')
            branch=$(echo "$pr" | jq -r '.headRefName')

            echo "👉 Processing PR #$number: $title"

            if echo "$labels" | grep -q "auto-approved"; then
              mergeable_state=$(gh pr view "$number" --repo "$GITHUB_REPOSITORY" --json mergeStateStatus --jq '.mergeStateStatus')
              if [ "$mergeable_state" = "DIRTY" ]; then
                echo "🔄 Rebasing PR #$number branch ($branch)..."
                git config --global user.name 'Bot'
                git config --global user.email 'bot@zaphiro.ch'

                git clone "https://x-access-token:${GH_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" repo
                cd repo
                git fetch origin
                git checkout "$branch"
                base_branch=$(gh pr view "$number" --json baseRefName --jq '.baseRefName')

                # Start rebase and automatically skip RELEASE_NOTES.md conflicts
                git rebase "origin/$base_branch" || {
                  echo "⚠️ Rebase conflict detected. Ignoring RELEASE_NOTES.md..."
                  # Mark RELEASE_NOTES.md as resolved without changing it
                  git checkout --ours RELEASE_NOTES.md || true
                  git add RELEASE_NOTES.md
                  git rebase --continue || git rebase --skip
                }

                git push --force-with-lease origin "$branch"
                echo "✅ Rebase complete and branch updated for PR #$number"
                cd ..
                rm -rf repo
              else
                echo "✅ PR #$number is up to date."
              fi

            echo "🔍 Checking CI status for PR #$number..."
            commit_sha=$(gh pr view "$number" --repo "$GITHUB_REPOSITORY" --json headRefOid --jq '.headRefOid')

            checks_state=$(gh api repos/$GITHUB_REPOSITORY/commits/$commit_sha/check-runs --jq '[.check_runs[].conclusion] | unique | join(",")')

            if echo "$checks_state" | grep -Eiq 'failure|timed_out|cancelled|action_required'; then
              echo "❌ Skipping PR #$number: one or more checks failed ($checks_state)"
              continue
            fi

            echo "🚀 Approving and merging PR #$number"
            gh pr review "$number" --repo "$GITHUB_REPOSITORY" --approve
            gh pr merge "$number" --repo "$GITHUB_REPOSITORY" --squash --auto
            gh pr edit "$number" --repo "$GITHUB_REPOSITORY" --add-label auto-approved
            echo "✅ Done with PR #$number"
          done
