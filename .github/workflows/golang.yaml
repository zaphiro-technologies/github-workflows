# Copyright 2024 Zaphiro Technologies
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Golang Lint & Test

concurrency:
  group: ${{github.repository}}-${{ github.ref_name }}-go
  cancel-in-progress: true

# Permissions needed
# permissions:
#   # Give the default GITHUB_TOKEN write permission to commit and push the
#   # updated CHANGELOG back to the repository.
#   # https://github.blog/changelog/2023-02-02-github-actions-updating-the-default-github_token-permissions-to-read-only/
#   contents: write

on:
  workflow_call:
    inputs:
      alert-threshold-benchmark:
        required: false
        default: 150%
        type: string
        description: Percent that will trigger benchmark alert
      skip-benchmark:
        required: false
        default: false
        type: boolean
        description: True to skip benchmark exec
      code-scan:
        required: false
        default: true
        type: boolean
        description: False to skip code-scan exec
      vulterability-scan:
        required: false
        default: true
        type: boolean
        description: False to skip vulterability-scan exec
      vulterability-scan-skip-dirs:
        required: false
        default: "vendor,.github"
        type: string
        description: Comma separated list of directories where vulnerability check is skipped
      pull-dvc-datasets:
        required: false
        default: false
        type: boolean
        description: True to install and configure dvc
      repositories:
        required: false
        type: string
        default: ""
        description: Comma or newline-separated list of repositories to grant access to during the golang build.
jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      files_changed: ${{ steps.filter.outputs.go == 'true' || steps.filter.outputs.scripts == 'true' }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 2 # To retrieve the preceding commit.
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          list-files: shell
          filters: |
            scripts:
              - '.golangci.yaml'
              - 'Makefile'
              - '.github/workflows/golang.*'
              - '**/*.sql'
              - '.docker/*.yml'
              - '.docker/*.yaml'
            go:
              - '**/*.go'
              - 'go.mod'
              - 'go.sum'
  lint:
    needs: changes
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: ${{ needs.changes.outputs.files_changed == 'true' && github.event.pull_request }}
    env:
      GOPRIVATE: github.com/zaphiro-technologies/*
    steps:
      - name: Prepare repositories list
        id: prepare
        run: |
          repos="${{ inputs.repositories }}"
          current_repo="${GITHUB_REPOSITORY#*/}"

          # If inputs.repositories is empty, just use current repo
          if [ -z "$repos" ]; then
            repos="$current_repo"
          else
            repos="$repos,$current_repo"
          fi

          # Convert CSV to newline-separated list and deduplicate
          echo "repositories<<EOF" >> $GITHUB_OUTPUT
          echo "$repos" | tr ',' '\n' | sort -u >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - uses: actions/create-github-app-token@v2
        id: generate-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_SECRET }}
          repositories: ${{ steps.prepare.outputs.repositories }}
      - uses: actions/checkout@v5
        with:
          ref: ${{github.event.pull_request.head.ref}} # Can't commit on detached PR merge commit, so this checkouts the branch
          token: ${{ steps.generate-token.outputs.token }}
      - run: git config --global "url.https://x-access-token:${{ steps.generate-token.outputs.token }}@github.com/.insteadOf" "https://github.com/"
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
      - name: Golines
        run: |
          go install github.com/segmentio/golines@latest
          golines . -w
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          args: --fix
          version: latest
      - name: Commit golines & golangci-lint changes
        run: |
          git config --global user.name 'Bot'
          git config --global user.email 'bot@zaphiro.ch'
          git commit -am "Automated lint fixes [dependabot skip]" || echo "No changes to commit"
          git push
  test:
    needs: changes
    runs-on: ubuntu-latest
    env:
      GOPRIVATE: github.com/zaphiro-technologies/*
    if: ${{ needs.changes.outputs.files_changed == 'true' }}
    steps:
      - name: Prepare repositories list
        id: prepare
        run: |
          repos="${{ inputs.repositories }}"
          current_repo="${GITHUB_REPOSITORY#*/}"

          # If inputs.repositories is empty, just use current repo
          if [ -z "$repos" ]; then
            repos="$current_repo"
          else
            repos="$repos,$current_repo"
          fi

          # Convert CSV to newline-separated list and deduplicate
          echo "repositories<<EOF" >> $GITHUB_OUTPUT
          echo "$repos" | tr ',' '\n' | sort -u >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - uses: actions/create-github-app-token@v2
        id: generate-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_SECRET }}
          repositories: ${{ steps.prepare.outputs.repositories }}
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Configure AWS Credentials
        if: ${{ inputs.pull-dvc-datasets }}
        id: creds
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-region: eu-south-1
          role-to-assume: arn:aws:iam::058264335177:role/zaphiro-github-role-demo
          output-credentials: true
      - name: Install DVC
        if: ${{ inputs.pull-dvc-datasets }}
        run: pip install dvc[s3]
      - name: Set-up git credentials for dvc
        if: ${{ inputs.pull-dvc-datasets }}
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          gh auth setup-git
          git config --global credential.helper '!/usr/bin/gh auth git-credential'
      - name: Pull DVC Data
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        if: ${{ inputs.pull-dvc-datasets }}
        run: dvc pull
      - run: git config --global "url.https://x-access-token:${{ steps.generate-token.outputs.token }}@github.com/.insteadOf" "https://github.com/"
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
      - name: Install gcov2lcov
        run: |
          go install github.com/jandelgado/gcov2lcov@latest
      # We Login in GHCR to retrieve owned private images used in docker-compose
      # This requires to set in the package settings read permission for the
      # repository where the golang ci is running
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Test
        run: |
          make ci-test
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: ${{ inputs.code-scan }}
        # we log in the registry to code check also images
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: SonarCloud Code Scan
        if: ${{ inputs.code-scan }}
        uses: SonarSource/sonarqube-scan-action@v6.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Download code coverage report from base branch
        uses: dawidd6/action-download-artifact@v11
        if: github.actor != 'dependabot[bot]'
        with:
          name: cov-result
          github_token: ${{ steps.generate-token.outputs.token }}
          branch: ${{github.base_ref}}
          if_no_artifact_found: warn
      - name: Generate Code Coverage report
        id: code-coverage
        uses: barecheck/code-coverage-action@v1
        if: github.actor != 'dependabot[bot]'
        with:
          barecheck-github-app-token: ${{ secrets.BARECHECK_GITHUB_APP_TOKEN }}
          lcov-file: "./coverage/lcov.info"
          base-lcov-file: ${{ hashFiles('./lcov.info') != ''  && './lcov.info' || null }}
          minimum-ratio: 70
          send-summary-comment: true
          show-annotations: ""
      - name: Upload code coverage for ref branch
        if: ${{ ! github.event.pull_request }}
        uses: actions/upload-artifact@v4
        with:
          name: cov-result
          path: ./coverage/lcov.info
          retention-days: 400

  benchmark:
    needs: changes
    runs-on: ubuntu-latest
    if: ${{ needs.changes.outputs.files_changed == 'true' && ! inputs.skip-benchmark}}
    env:
      GOPRIVATE: github.com/zaphiro-technologies/*
    steps:
      - name: Prepare repositories list
        id: prepare
        run: |
          repos="${{ inputs.repositories }}"
          current_repo="${GITHUB_REPOSITORY#*/}"

          # If inputs.repositories is empty, just use current repo
          if [ -z "$repos" ]; then
            repos="$current_repo"
          else
            repos="$repos,$current_repo"
          fi

          # Convert CSV to newline-separated list and deduplicate
          echo "repositories<<EOF" >> $GITHUB_OUTPUT
          echo "$repos" | tr ',' '\n' | sort -u >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - uses: actions/create-github-app-token@v2
        id: generate-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_SECRET }}
          repositories: ${{ steps.prepare.outputs.repositories }}
      - uses: actions/checkout@v5
      - run: git config --global url.https://x-access-token:${{ steps.generate-token.outputs.token }}@github.com/.insteadOf https://github.com/
      - uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
      # We Login in GHCR to retrieve owned private images used in docker-compose
      # This requires to set in the package settings read permission for the
      # repository where the golang ci is running
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Run benchmark
        shell: bash
        run: make ci-bench | tee output.txt
      # Download previous benchmark result from cache (if exists)
      - name: Download benchmark report from base branch
        uses: dawidd6/action-download-artifact@v11
        with:
          name: benchmark-result
          github_token: ${{ steps.generate-token.outputs.token }}
          branch: ${{ github.base_ref || github.ref_name }}
          if_no_artifact_found: warn
      # Run `github-action-benchmark` action
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          # What benchmark tool the output.txt came from
          tool: "go"
          # Where the output from the benchmark tool is stored
          output-file-path: output.txt
          # Where the previous data file is stored
          external-data-json-path: benchmark-data.json
          # Workflow will fail when an alert happens
          fail-on-alert: true
          # Enable alert commit comment
          comment-on-alert: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          alert-threshold: ${{ inputs.alert-threshold-benchmark }}
          summary-always: true
      - name: Upload code coverage for ref branch
        if: ${{ ! github.event.pull_request }}
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-result
          path: benchmark-data.json
          retention-days: 400
  vulnerability:
    needs: changes
    if: ${{ inputs.vulterability-scan}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Run Trivy vulnerability scanner (for summary)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
          skip-dirs: ${{ inputs.vulterability-scan-skip-dirs }}
          scanners: "vuln,secret,misconfig"
          hide-progress: true
          output: trivy.txt
        env:
          TRIVY_SKIP_DB_UPDATE: true
          TRIVY_SKIP_JAVA_DB_UPDATE: true
      - name: Publish Trivy Output to Summary
        run: |
          if [[ -s trivy.txt ]]; then
            {
              echo "### Trivy Security Output"
              echo ""
              echo '```text'
              cat trivy.txt
              echo '```'
            } >> $GITHUB_STEP_SUMMARY
          fi
      # this comes as last or scan results won't be uploaded
      - name: Run Trivy vulnerability scanner (security treshold)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
          skip-dirs: ${{ inputs.vulterability-scan-skip-dirs }}
          scanners: "vuln,secret,misconfig"
          exit-code: "1"
          severity: MEDIUM,HIGH,CRITICAL
          # On a subsequent call to the action we know trivy is already installed so can skip this
          skip-setup-trivy: true
        env:
          TRIVY_SKIP_DB_UPDATE: true
          TRIVY_SKIP_JAVA_DB_UPDATE: true
